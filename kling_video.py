import torch
from diffusers import DiffusionPipeline
import imageio
import os
import time
import numpy as np
from datetime import datetime

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
print(f"PyTorch: {torch.__version__}")
print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")

if not torch.cuda.is_available():
    print("‚ùå CUDA –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!")
    exit(1)

gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
print(f"üíæ GPU –ø–∞–º—è—Ç—å: {gpu_memory:.1f} GB")

print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º ModelScope –º–æ–¥–µ–ª—å...")
try:
    pipeline = DiffusionPipeline.from_pretrained(
        "damo-vilab/modelscope-damo-text-to-video-synthesis",
        torch_dtype=torch.float16,
        variant="fp16"
    ).to("cuda")
    print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    exit(1)

# –í–∞—à –ø—Ä–æ–º–ø—Ç
prompt = "a man leaves the room and teleports to the world of ANIME NARUTO, fighting with enemies in a beautiful field with flowers in rainy weather, cinematic, high quality, dynamic action, epic battle, anime style"

print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...")
print(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt}")

try:
    print("üî® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ... (—ç—Ç–æ –∑–∞–π–º–µ—Ç 3-8 –º–∏–Ω—É—Ç)")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ - 8 —Å–µ–∫—É–Ω–¥, 64 –∫–∞–¥—Ä–∞
    result = pipeline(
        prompt=prompt,
        num_frames=64,
        num_inference_steps=25,
        guidance_scale=7.5,
        generator=torch.Generator("cuda").manual_seed(int(time.time())),
        height=384,
        width=384,
    )
    
    video_frames = result.frames[0]
    print(f"‚úÖ –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(video_frames)} –∫–∞–¥—Ä–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_path = f"naruto_battle_{timestamp}.mp4"
    
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ...")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy arrays
    frames_np = [np.array(frame) for frame in video_frames]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø–æ–º–æ—â—å—é imageio
    with imageio.get_writer(
        output_path, 
        fps=8, 
        codec='libx264',
        quality=8,
        pixelformat='yuv420p'
    ) as writer:
        for frame in frames_np:
            writer.append_data(frame)
    
    if os.path.exists(output_path):
        file_size = os.path.getsize(output_path) / (1024 * 1024)
        print(f"üéâ –í–ò–î–ï–û –ì–û–¢–û–í–û! üéâ")
        print(f"üìÅ –§–∞–π–ª: {output_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {file_size:.1f} MB")
        print(f"\nüì• –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
        print(f"scp root@192.165.134.28:{output_path} .")
    else:
        print("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
