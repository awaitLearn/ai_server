import torch
import PIL.Image
import imageio
import os
import time
import numpy as np
from datetime import datetime

try:
    from diffusers import KlingImgToVidPipeline
    print("‚úÖ KlingImgToVidPipeline –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å KlingImgToVidPipeline")
    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install git+https://github.com/huggingface/diffusers.git")
    exit(1)

class KlingVideoGenerator:
    def __init__(self):
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        print(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        
        if torch.cuda.is_available():
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
            print(f"üíæ GPU –ø–∞–º—è—Ç—å: {gpu_memory:.1f} GB")
            
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º Kling AI –º–æ–¥–µ–ª—å... –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è (10-20 –º–∏–Ω—É—Ç)...")
        self._load_model()
    
    def _load_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º Kling AI –º–æ–¥–µ–ª—å"""
        try:
            self.pipeline = KlingImgToVidPipeline.from_pretrained(
                "kling/Kling",
                torch_dtype=torch.float16,
                variant="fp16",
            ).to(self.device)
            print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            print("\nüîß –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:")
            print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏: git lfs install")
            print("2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install git+https://github.com/huggingface/diffusers.git")
            print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install decord einops omegaconf timm requests av")
            raise

    def _clear_memory(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ CUDA"""
        torch.cuda.empty_cache()
        print("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")

    def generate_video(self, image_path: str, prompt: str, num_frames: int = 50) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–º–ø—Ç–∞"""
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ ({num_frames} –∫–∞–¥—Ä–æ–≤)...")
        print(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            image = PIL.Image.open(image_path).convert("RGB")
            image = image.resize((1024, 576))
            print(f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image.size}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

        print(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {num_frames} –∫–∞–¥—Ä–æ–≤")

        try:
            print("üî® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ... (—ç—Ç–æ –∑–∞–π–º–µ—Ç 5-15 –º–∏–Ω—É—Ç)")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
            result = self.pipeline(
                image=image,
                prompt=prompt,
                num_frames=num_frames,
                fps=10,
                num_inference_steps=20,
                guidance_scale=7.5,
                generator=torch.Generator(self.device).manual_seed(int(time.time())),
            )
            
            video_frames = result.frames[0]
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(video_frames)} –∫–∞–¥—Ä–æ–≤")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_path = self._save_video(video_frames, fps=10)
        return output_path

    def _save_video(self, frames, fps: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä—ã –∫–∞–∫ –≤–∏–¥–µ–æ"""
        if not frames:
            print("‚ùå –ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return None

        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = f"kling_video_{timestamp}.mp4"
            
            print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL Image –≤ numpy arrays
            frames_np = [np.array(frame) for frame in frames]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø–æ–º–æ—â—å—é imageio
            with imageio.get_writer(
                output_path, 
                fps=fps, 
                codec='libx264',
                quality=9,
                pixelformat='yuv420p'
            ) as writer:
                for frame in frames_np:
                    writer.append_data(frame)
            
            if os.path.exists(output_path):
                file_size = os.path.getsize(output_path) / (1024 * 1024)
                print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path} ({file_size:.1f} MB)")
                return output_path
            else:
                print("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None

if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA
    if not torch.cuda.is_available():
        print("‚ùå CUDA –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!")
        exit(1)
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
    gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
    print(f"üíæ GPU –ø–∞–º—è—Ç—å: {gpu_memory:.1f} GB")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = KlingVideoGenerator()
    
    # –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    image_path = "face.jpg"
    prompt = "a man leaves the room and teleports to the world of ANIME NARUTO, fighting with enemies in a beautiful field with flowers in rainy weather, cinematic, high quality, dynamic action, epic battle"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ (–Ω–∞—á–Ω–µ–º —Å 30 –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞)
    print("\n‚≠ê –°–¢–ê–†–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò ‚≠ê")
    result = generator.generate_video(
        image_path=image_path,
        prompt=prompt,
        num_frames=30  # 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    )
    
    if result:
        print(f"\nüéâ –í–ò–î–ï–û –ì–û–¢–û–í–û! üéâ")
        print(f"üìÅ –§–∞–π–ª: {result}")
        print("\nüì• –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
        print(f"scp root@192.165.134.28:{result} .")
    else:
        print("\nüí• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
