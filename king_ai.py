import torch
from diffusers import KlingImgToVidPipeline
from PIL import Image
import imageio
import os
import time
from datetime import datetime

class KlingVideoGenerator:
    def __init__(self):
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        print(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å
        if torch.cuda.is_available():
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
            print(f"üíæ GPU –ø–∞–º—è—Ç—å: {gpu_memory:.1f} GB")
            
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º Kling AI –º–æ–¥–µ–ª—å... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        self._load_model()
    
    def _load_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º Kling AI –º–æ–¥–µ–ª—å"""
        try:
            self.pipeline = KlingImgToVidPipeline.from_pretrained(
                "kling/Kling",
                torch_dtype=torch.float16,
                variant="fp16",
            ).to(self.device)
            print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: git lfs install")
            raise

    def _clear_memory(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ CUDA"""
        torch.cuda.empty_cache()
        print("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")

    def generate_video(self, image_path: str, prompt: str, duration_sec: int = 60) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–º–ø—Ç–∞"""
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ ({duration_sec} —Å–µ–∫—É–Ω–¥)...")
        print(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            image = Image.open(image_path).convert("RGB")
            print(f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image.size}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        fps = 10  # FPS –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        total_frames = duration_sec * fps
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã (Kling –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏)
        segment_frames = min(100, total_frames)  # –ú–∞–∫—Å–∏–º—É–º 100 –∫–∞–¥—Ä–æ–≤ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
        num_segments = max(1, total_frames // segment_frames)
        
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {fps} FPS, {total_frames} –∫–∞–¥—Ä–æ–≤, {num_segments} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

        all_frames = []
        
        try:
            for segment in range(num_segments):
                print(f"üî® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç {segment + 1}/{num_segments}...")
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –≤–∏–¥–µ–æ
                video_frames = self.pipeline(
                    image=image,
                    prompt=prompt,
                    num_frames=segment_frames,
                    fps=fps,
                    num_inference_steps=30,
                    guidance_scale=7.5,
                    generator=torch.Generator(self.device).manual_seed(int(time.time()) + segment),
                    height=576,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                    width=1024,
                ).frames[0]
                
                all_frames.extend(video_frames)
                print(f"‚úÖ –°–µ–≥–º–µ–Ω—Ç {segment + 1} –≥–æ—Ç–æ–≤: {len(video_frames)} –∫–∞–¥—Ä–æ–≤")
                
                # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
                self._clear_memory()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_path = self._save_video(all_frames, fps)
        return output_path

    def _save_video(self, frames, fps: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä—ã –∫–∞–∫ –≤–∏–¥–µ–æ"""
        if not frames:
            print("‚ùå –ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return None

        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = f"kling_video_{timestamp}.mp4"
            
            print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL Image –≤ numpy arrays
            frames_np = [np.array(frame) for frame in frames]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø–æ–º–æ—â—å—é imageio
            with imageio.get_writer(
                output_path, 
                fps=fps, 
                codec='libx264',
                quality=10,
                pixelformat='yuv420p'
            ) as writer:
                for frame in frames_np:
                    writer.append_data(frame)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if os.path.exists(output_path):
                file_size = os.path.getsize(output_path) / (1024 * 1024)  # –≤ MB
                print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path} ({file_size:.1f} MB)")
                return output_path
            else:
                print("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏
def check_gpu_memory():
    if torch.cuda.is_available():
        allocated = torch.cuda.memory_allocated() / 1024**3
        reserved = torch.cuda.memory_reserved() / 1024**3
        print(f"üìä –ü–∞–º—è—Ç—å: {allocated:.1f} GB allocated, {reserved:.1f} GB reserved")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    check_gpu_memory()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = KlingVideoGenerator()
    
    # –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    image_path = "face.jpg"  # –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    prompt = "a man I leave the room and then find myself in the world of ANIME NARUTO, and start fighting with enemies in a beautiful field with flowers in rainy weather, cinematic, high quality, best quality, dynamic action, epic battle"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ (60 —Å–µ–∫—É–Ω–¥)
    print("\n‚≠ê –°–¢–ê–†–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò ‚≠ê")
    result = generator.generate_video(
        image_path=image_path,
        prompt=prompt,
        duration_sec=60  # 1 –º–∏–Ω—É—Ç–∞
    )
    
    if result:
        print(f"\nüéâ –í–ò–î–ï–û –ì–û–¢–û–í–û! üéâ")
        print(f"üìÅ –§–∞–π–ª: {result}")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: scp user@your-server:{result} .  –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    else:
        print("\nüí• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
    
    check_gpu_memory()